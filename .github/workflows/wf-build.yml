# Workflow name, which will appear in the GitHub Actions UI
name: Original Scan, Build and Package Application
 
on: 
  workflow_dispatch:
  workflow_call: # Allow this workflow to be called from other workflows
    inputs:
      environment-name:
        description: Target Liferay environment (e.g. dev, test, uat)
        required: false
        default: dev
        type: string
      security-check:
        description: Run Security Check
        required: false
        default: true
        type: boolean
      code-quality-check:
        description: Run Code Quality Check
        required: false
        default: true
        type: boolean
 
# Define environment variables used throughout the workflow steps
env:
  JAVA_VERSION: '21.0.8'
  JAVA_DISTRIBUTION: 'adopt'
# BUILD_COMMANDS: './gradlew clean build "-Pliferay.workspace.environment=common"'
# BUILD_COMMANDS: './gradlew clean deploy "-Pliferay.workspace.environment=common"'
  ENVIRONMENT: ${{ inputs.environment-name }}
  BUILD_COMMANDS: './gradlew clean build "-Pliferay.workspace.environment=${{ inputs.environment-name }}"'
  CODEQUALITY_BUILD_COMMANDS: './gradlew clean test "-Pliferay.workspace.environment=${{ inputs.environment-name }}"' # Removed sonarqube task
  MATRIX_LANGUAGES: 'java'
  VERSION: 1.0.0-SNAPSHOT # Artifact Version
  ASSET_FILES: 'liferay-bundle.zip' # Placeholder for artifact ID

 
jobs:
  # Job 1: Security Scans
  security_scans:
    name: Security Scans
    # runs-on: ubuntu-22.04 
    runs-on: ubuntu-latest
 
    if: ${{ github.actor != 'dependabot[bot]' }}
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    # Step 1: Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v4.1.7
 
    # Step 2: Secrets & Dependency Scans
    - name: Security, Secrets and Dependency Scans
      env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
      if: ${{ inputs.security-check }}
      # uses: cuscal/app-eengineering-shared-githubactions/actions/dist/codeql-java@v1.0
      run: |
       echo "Running security and dependency scans..."
       # java-version is the version of java to be used for compilation. 
       java-version: ${{ env.JAVA_VERSION }}
        # build-commands is the custom script to be used to build the code so that it can build and scan the code. 
       build-commands: | 
          chmod +x ./gradlew
          ${{ env.BUILD_COMMANDS }} -x formatSource
        # matrix-languages to be used
       matrix-languages: ${{ env.MATRIX_LANGUAGES }}
 
        # username & password for read access to Github packages.
       GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}          
       GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
        # Step 3: Prints a link to the GitHub Advanced Security scan report

    - name: Print Security, Secrets & Dependency Scan Report
      if: ${{ inputs.security-check }}
      run: |
        echo "## GitHub Advanced Security Report" >> $GITHUB_STEP_SUMMARY
        echo "[CodeQL Alerts](https://github.com/$GITHUB_REPOSITORY/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
 
    # Step 2: SAST & SCA Scans
    - name: Run SAST and SCA Scans
      if: ${{ inputs.security-check }}
      run: |
        echo "SAST & SCA Scans"
        # cx-client-id & cx-client-secret is needed for authentication with CXONE server. 
        cx-client-id: ${{ vars.CX_CLIENT_ID }}
        cx-client-secret: ${{ secrets.CX_CLIENT_SECRET }}
  # Job 2: Code Quality Scans
  code_quality_scans:
    name: Code Quality Scans
    runs-on: [self-hosted, env-nonprod]  # The type of runner that the job will run on.
    if: ${{ github.actor != 'dependabot[bot]' }}
    environment: nonprod # This job is run in the nonprod runner environment.
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4.1.7

      # Step 2: Get the branch name.
      - name: Get Branch Name
        shell: bash
        id: get-branch
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_OUTPUT"

      # Step 3: Code Quality Check
      - name: Code Quality Check
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
        if: ${{ inputs.code-quality-check }}
        # uses: cuscal/app-eengineering-shared-githubactions/actions/dist/sonarqube-java@v1.0
        run: |
          echo "Code Quality Check"
          java-version: ${{ env.JAVA_VERSION }}
          # Specifies the custom script to be used to build the code so that it can build and scan the code.
          build-commands: | 
            chmod +x ./gradlew
            ${{ env.CODEQUALITY_BUILD_COMMANDS }} -x formatSource
          # Specifies the username and password for read access to Github packages.
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}          
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}

  # Job 3: Create and Upload Artifact after Code Quality and Security Checks
  # Job 3: Build the Liferay application and package it for deployment
  create_and_upload_artifact:
    name:  Create and Upload Artifact
  # runs-on: ubuntu-22.04
    runs-on: ubuntu-latest
    env:
      PROJECT_CODE: "liferay"
      SANITIZED_BRANCH_NAME: ${{ github.ref_name }}
    # needs:
    #   - security_scans # Ensure this job runs after the security scans job
    #   - code_quality_scans # Ensure this job runs after the code quality scans job
    steps:
      # Step 1: Checkout the repository
      # - name: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4
      #   uses: actions/checkout@v4.1.7
      # Step 2: Set up Java
      - name: Set up JDK
      # uses: actions/setup-java@v3
        uses: actions/setup-java@v4
        with:
           distribution: temurin
           java-version: 21.0.8
 
      # Step 3: Set environment variables for Gradle build
      - name: Set Environment Variables
        run: |
          echo "GH_MAVEN_PACKAGES_READ_USER_NAME=${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}" >> $GITHUB_ENV
          echo "GH_MAVEN_PACKAGES_READ_PASSWORD=${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}" >> $GITHUB_ENV
 
      # Step 4: Grant execute permissions to gradlew
      - name: Make gradlew executable
        run: chmod +x ./gradlew

        # ✅ NEW: Validate environment folder with fallback to 'common'
      - name: Validate Liferay Environment Folder
        id: validate-env
        run: |
          echo "Checking if environment folder exists for '${{ env.ENVIRONMENT }}'..."
          if [ -d "configs/${{ env.ENVIRONMENT }}" ]; then
            echo "✅ Found configs/${{ env.ENVIRONMENT }}"
            echo "LIFERAY_ENVIRONMENT=${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          else
            echo "⚠️ configs/${{ env.ENVIRONMENT }} not found. Falling back to 'common'."
            echo "LIFERAY_ENVIRONMENT=common" >> $GITHUB_ENV
          fi
 
      # Step 5: Add fragments to deploy folder
      #- name: Add fragments to deploy folder
      #  run: |
      #    mkdir -p configs/common/deploy
      #    cd fragments/
      #    for file in *; do zip -r ${file%.*}.zip $file/; done
      #    cp *.zip ../configs/common/deploy/
      #    rm *.zip

      - name: Add fragments to deploy folder
        run: |
          mkdir -p configs/common/deploy
          cd fragments/
          for file in *; do zip -r ${file%.*}.zip $file/; done
          cp *.zip ../configs/common/deploy/
          rm *.zip

      - name: Install Liferay Blade CLI (official installer)
        run: |
          echo " Installing Liferay Blade CLI..."
          curl -L https://raw.githubusercontent.com/liferay/liferay-blade-cli/master/cli/installers/local | sh
        # Add Blade CLI to PATH for the rest of the workflow
      - name: Add Blade CLI to PATH
        run: echo "/home/runner/jpm/bin" >> $GITHUB_PATH

      - name: Verify Blade CLI installation
        run: blade version

      # Step 6: Build Liferay Bundle
      - name: Build Liferay Bundle
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
        run: |
          java -version
          blade version
          npm -v
          node -v
          npm config set strict-ssl false
          export GRADLE_OPTS="-Xms1724m -Xmx5048m"
          echo " Running Liferay Workspace build via Blade CLI..."
          # blade gw clean
          # blade gw "-Pliferay.workspace.environment=common" distBundleZip
          ./gradlew clean
          ./gradlew "-Pliferay.workspace.environment=common" distBundleZip
 
      # Step 7: Package Liferay Bundle
      - name: Package Liferay Bundle
        run: |
          # Verify the existence of required files and folders
          echo "Checking if required files and folders exist..."
          ls -latr build || echo "Build folder does not exist!"
          ls -latr configs || echo "Configs folder does not exist!"
          # Ensure the build file is not empty
          if [ -f build/lfrupg-cuscal.zip ]; then
            if [ ! -s build/lfrupg-cuscal.zip ]; then
              echo "Error: build/lfrupg-cuscal.zip is empty!"
              exit 1
            fi
          else
            echo "Error: build/lfrupg-cuscal.zip does not exist!"
            exit 1
          fi
          # Create a folder in the current directory
          mkdir -p temp_dir
          # Copy necessary files to the folder
          echo "Copying files to the folder..."
          cp -v build/lfrupg-cuscal.zip temp_dir/CUSCAL-BUNDLE-${{ github.run_number }}.zip
            if [ -d configs ]; then
            cp -r configs temp_dir/
            else
              echo "Error: configs folder does not exist!"
              exit 1
          fi
          # Zip the contents of the folder
          cd temp_dir
          # Replace '/' with '-' in ${{ github.ref_name }} and pass as environment variable
          sanitized_branch_name=$(echo "${{ github.ref_name }}" | sed 's|/|-|g')
          echo "SANITIZED_BRANCH_NAME=${sanitized_branch_name}" >> $GITHUB_ENV
            zip -r -q ${{ env.ASSET_FILES }} .
          # Move the zip file to the current directory
            mv ${{ env.ASSET_FILES }} "$GITHUB_WORKSPACE/"
          # Clean up the folder
          cd "$GITHUB_WORKSPACE"
          rm -rf temp_dir
          echo "Liferay Packaging completed successfully!"
      # Step 8: Publish Artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.1
        id: artifact-upload-step
        with:
          name: artifacts
          path: ${{ env.ASSET_FILES }}
