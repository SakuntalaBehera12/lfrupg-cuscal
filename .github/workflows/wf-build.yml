name: Scan, Build and Package Liferay Application

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      security-check:
        description: "Run Security Check"
        required: false
        default: false
        type: boolean
      code-quality-check:
        description: "Run Code Quality Check"
        required: false
        default: false
        type: boolean
        

env:
  JAVA_VERSION: '21.0.8'
  JAVA_DISTRIBUTION: 'temurin'
  BUILD_COMMANDS: './gradlew clean deploy "-Pliferay.workspace.environment=common"'
  CODEQUALITY_BUILD_COMMANDS: './gradlew clean test "-Pliferay.workspace.environment=common"'
  MATRIX_LANGUAGES: 'java'
  VERSION: 1.0.0-SNAPSHOT
  ASSET_FILES: 'liferay-bundle.zip'

jobs:
  security_scans:
    name: Security Scans
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && inputs.security-check }}
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Security, Secrets and Dependency Scans
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
        uses: cuscal/app-eengineering-shared-githubactions/actions/dist/codeql-java@v1.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          build-commands: |
            chmod +x ./gradlew
            ${{ env.BUILD_COMMANDS }} -x formatSource
          matrix-languages: ${{ env.MATRIX_LANGUAGES }}
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}

      - name: Print Security Scan Report
        run: |
          echo "## GitHub Advanced Security Report" >> $GITHUB_STEP_SUMMARY
          echo "[CodeQL Alerts](https://github.com/$GITHUB_REPOSITORY/security/code-scanning)" >> $GITHUB_STEP_SUMMARY

  code_quality_scans:
    name: Code Quality Scans
    runs-on: [self-hosted, env-nonprod]
    if: ${{ github.actor != 'dependabot[bot]' && inputs.code-quality-check }}
    environment: nonprod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Code Quality Check
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
        uses: cuscal/app-eengineering-shared-githubactions/actions/dist/sonarqube-java@v1.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          build-commands: |
            chmod +x ./gradlew
            ${{ env.CODEQUALITY_BUILD_COMMANDS }} -x formatSource
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}

  create_and_upload_artifact:
    name: Create and Upload Liferay Artifact
    runs-on: ubuntu-latest
    needs:
      - security_scans
      - code_quality_scans
    if: ${{ always() }}
    env:
      PROJECT_CODE: "liferay"
      SANITIZED_BRANCH_NAME: ${{ github.ref_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set Environment Variables
        run: |
          echo "GH_MAVEN_PACKAGES_READ_USER_NAME=${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}" >> $GITHUB_ENV
          echo "GH_MAVEN_PACKAGES_READ_PASSWORD=${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}" >> $GITHUB_ENV

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Add fragments to deploy folder
        run: |
          mkdir -p configs/common/deploy
          cd fragments/
          for file in *; do zip -r ${file%.*}.zip $file/; done
          cp *.zip ../configs/common/deploy/
          rm *.zip

      - name: Install Liferay Blade CLI (official installer)
        run: |
          echo "Installing Liferay Blade CLI..."
          curl -L https://raw.githubusercontent.com/liferay/liferay-blade-cli/master/cli/installers/local | sh

      - name: Add Blade CLI to PATH
        run: echo "/home/runner/jpm/bin" >> $GITHUB_PATH

      - name: Verify Blade CLI installation
        run: blade version

      - name: Debug Gradle Environment
        run: |
          ./gradlew --version
          echo "Checking repository access..."
          curl -I https://repository.liferay.com/nexus/content/groups/public || echo "No access to Liferay repo"

      - name: Build Liferay Bundle
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}
          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
        run: |
          java -version
          blade version
          npm -v
          node -v
          npm config set strict-ssl false
          export GRADLE_OPTS="-Xms1724m -Xmx5048m"
          echo "Running Liferay Workspace build via Gradle..."
          ./gradlew clean
          ./gradlew "-Pliferay.workspace.environment=common" distBundleZip

      - name: Package Liferay Bundle
        run: |
          echo "Checking required files..."
          ls -latr build || echo "Build folder does not exist!"
          ls -latr configs || echo "Configs folder does not exist!"

          if [ -f build/onprem-gshared-ang-portals-liferay.zip ]; then
            if [ ! -s build/onprem-gshared-ang-portals-liferay.zip ]; then
              echo "Error: build/onprem-gshared-ang-portals-liferay.zip is empty!"
              exit 1
            fi
          else
            echo "Error: build/onprem-gshared-ang-portals-liferay.zip does not exist!"
            exit 1
          fi

          mkdir -p temp_dir
          cp -v build/onprem-gshared-ang-portals-liferay.zip temp_dir/CUSCAL-BUNDLE-${{ github.run_number }}.zip

          if [ -d configs ]; then
            cp -r configs temp_dir/
          else
            echo "Error: configs folder does not exist!"
            exit 1
          fi

          cd temp_dir
          sanitized_branch_name=$(echo "${{ github.ref_name }}" | sed 's|/|-|g')
          echo "SANITIZED_BRANCH_NAME=${sanitized_branch_name}" >> $GITHUB_ENV

          zip -r -q ${{ env.ASSET_FILES }} .
          mv ${{ env.ASSET_FILES }} "$GITHUB_WORKSPACE/"
          cd "$GITHUB_WORKSPACE"
          rm -rf temp_dir
          echo "Liferay Packaging completed successfully!"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: liferay-artifact
          path: ${{ env.ASSET_FILES }}
