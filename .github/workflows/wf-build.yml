name: 'Original Scan, Build and Package Application'
'on':
  workflow_dispatch: null
  workflow_call:
    inputs:
      environment-name:
        description: 'Target Liferay environment (e.g. dev, test, uat)'
        required: false
        default: dev
        type: string
      security-check:
        description: Run Security Check
        required: false
        default: true
        type: boolean
      code-quality-check:
        description: Run Code Quality Check
        required: false
        default: true
        type: boolean
env:
  JAVA_VERSION: 21.0.8
  JAVA_DISTRIBUTION: adopt
  ENVIRONMENT: ".env.${{ inputs.environment-name }}"
  BUILD_COMMANDS: >-
    ./gradlew clean build "-Pliferay.workspace.environment=${{
    inputs.environment-name }}"
  CODEQUALITY_BUILD_COMMANDS: >-
    ./gradlew clean test "-Pliferay.workspace.environment=${{
    inputs.environment-name }}"
  MATRIX_LANGUAGES: java
  VERSION: 1.0.0-SNAPSHOT
  ASSET_FILES: liferay-bundle.zip
jobs:
  security_scans:
    name: Security Scans
    runs-on: ubuntu-latest
    if: '${{ github.actor != ''dependabot[bot]'' }}'
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.1.7
      - name: 'Security, Secrets and Dependency Scans'
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: '${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}'
          GH_MAVEN_PACKAGES_READ_PASSWORD: '${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}'
        if: '${{ inputs.security-check }}'
        run: >
          echo "Running security and dependency scans..."

          # java-version is the version of java to be used for compilation. 

          java-version: ${{ env.JAVA_VERSION }}
           # build-commands is the custom script to be used to build the code so that it can build and scan the code. 
          build-commands: | 
             chmod +x ./gradlew
             ${{ env.BUILD_COMMANDS }} -x formatSource
           # matrix-languages to be used
          matrix-languages: ${{ env.MATRIX_LANGUAGES }}

           # username & password for read access to Github packages.
          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{
          secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}          

          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{
          secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
           # Step 3: Prints a link to the GitHub Advanced Security scan report
      - name: 'Print Security, Secrets & Dependency Scan Report'
        if: '${{ inputs.security-check }}'
        run: >
          echo "## GitHub Advanced Security Report" >> $GITHUB_STEP_SUMMARY

          echo "[CodeQL
          Alerts](https://github.com/$GITHUB_REPOSITORY/security/code-scanning)"
          >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
      - name: Run SAST and SCA Scans
        if: '${{ inputs.security-check }}'
        run: >
          echo "SAST & SCA Scans"

          # cx-client-id & cx-client-secret is needed for authentication with
          CXONE server. 

          cx-client-id: ${{ vars.CX_CLIENT_ID }}

          cx-client-secret: ${{ secrets.CX_CLIENT_SECRET }}
  code_quality_scans:
    name: Code Quality Scans
    runs-on:
      - self-hosted
      - env-nonprod
    if: '${{ github.actor != ''dependabot[bot]'' }}'
    environment: nonprod
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.1.7
      - name: Get Branch Name
        shell: bash
        id: get-branch
        run: 'echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_OUTPUT"'
      - name: Code Quality Check
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: '${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}'
          GH_MAVEN_PACKAGES_READ_PASSWORD: '${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}'
        if: '${{ inputs.code-quality-check }}'
        run: >
          echo "Code Quality Check"

          java-version: ${{ env.JAVA_VERSION }}

          # Specifies the custom script to be used to build the code so that it
          can build and scan the code.

          build-commands: | 
            chmod +x ./gradlew
            ${{ env.CODEQUALITY_BUILD_COMMANDS }} -x formatSource
          # Specifies the username and password for read access to Github
          packages.

          GH_MAVEN_PACKAGES_READ_USER_NAME: ${{
          secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}          

          GH_MAVEN_PACKAGES_READ_PASSWORD: ${{
          secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}
  create_and_upload_artifact:
    name: Create and Upload Artifact
    runs-on: ubuntu-latest
    env:
      PROJECT_CODE: liferay
      SANITIZED_BRANCH_NAME: '${{ github.ref_name }}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21.0.8
      - name: Set Environment Variables
        run: >
          echo "GH_MAVEN_PACKAGES_READ_USER_NAME=${{
          secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}" >> $GITHUB_ENV

          echo "GH_MAVEN_PACKAGES_READ_PASSWORD=${{
          secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}" >> $GITHUB_ENV
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Validate and Prepare Liferay Environment Folders
        id: validate-env
        run: "echo \"\U0001F50D Checking environment folder for '${{ env.ENVIRONMENT }}'...\"\n\nENV_FOLDER=\".env.${{ env.ENVIRONMENT }}\"\n\n# Debug current directory contents for troubleshooting\nls -la\n\nif [ -d \"${ENV_FOLDER}\" ]; then\necho \"✅ Found ${ENV_FOLDER}\"\necho \"LIFERAY_ENVIRONMENT=common,${ENV_FOLDER}\" >> $GITHUB_ENV\nelse\n echo \"⚠️ ${ENV_FOLDER} not found. Using only 'common'\"\necho \"LIFERAY_ENVIRONMENT=common\" >> $GITHUB_ENV\nfi\n\n   echo \"➡️ Using configuration folders: $LIFERAY_ENVIRONMENT\"\n"
      - name: Add fragments to deploy folder
        run: |
          mkdir -p configs/common/deploy
          cd fragments/
          for file in *; do zip -r ${file%.*}.zip $file/; done
          cp *.zip ../configs/common/deploy/
          rm *.zip
      - name: Install Liferay Blade CLI (official installer)
        run: >
          echo " Installing Liferay Blade CLI..."

          curl -L
          https://raw.githubusercontent.com/liferay/liferay-blade-cli/master/cli/installers/local
          | sh
      - name: Add Blade CLI to PATH
        run: echo "/home/runner/jpm/bin" >> $GITHUB_PATH
      - name: Verify Blade CLI installation
        run: blade version
      - name: Build Liferay Bundle
        env:
          GH_MAVEN_PACKAGES_READ_USER_NAME: '${{ secrets.GH_MAVEN_PACKAGES_READ_USER_NAME }}'
          GH_MAVEN_PACKAGES_READ_PASSWORD: '${{ secrets.GH_MAVEN_PACKAGES_READ_PASSWORD }}'
        run: |
          java -version
          blade version
          npm -v
          node -v
          npm config set strict-ssl false
          export GRADLE_OPTS="-Xms1724m -Xmx5048m"
          echo " Running Liferay Workspace build via Blade CLI..."
          # blade gw clean
          # blade gw "-Pliferay.workspace.environment=common" distBundleZip
          ./gradlew clean
          ./gradlew "-Pliferay.workspace.environment=common,${ENVIRONMENT}" distBundleZip

      - name: Package Liferay Bundle
        run: >
          # Verify the existence of required files and folders
          echo "Checking if required files and folders exist..."
          ls -latr build || echo "Build folder does not exist!"
          # tree build || echo "Build folder does not exist!"
          # For the configs folder
          ls -latr configs || echo "Configs folder does not exist!"
          # tree configs || echo "Configs folder does not exist!"
          # Ensure the build file is not empty
          if [ -f build/lfrupg-cuscal.zip ]; then
            if [ ! -s build/lfrupg-cuscal.zip ]; then
              echo "Error: build/lfrupg-cuscal.zip is empty!"
              exit 1
            fi
          else
            echo "Error: build/lfrupg-cuscal.zip does not exist!"
            exit 1
          fi
          # Create a folder in the current directory
          mkdir -p temp_dir
          # Copy necessary files to the folder
          echo "Copying files to the folder..."
          cp -v build/lfrupg-cuscal.zip temp_dir/CUSCAL-BUNDLE-${{
          github.run_number }}.zip
            if [ -d configs ]; then
            cp -r configs temp_dir/
            else
              echo "Error: configs folder does not exist!"
              exit 1
          fi
          # Zip the contents of the folder
          cd temp_dir
          # Replace '/' with '-' in ${{ github.ref_name }} and pass as
          environment variable
          sanitized_branch_name=$(echo "${{ github.ref_name }}" | sed 's|/|-|g')
          echo "SANITIZED_BRANCH_NAME=${sanitized_branch_name}" >> $GITHUB_ENV
            zip -r -q ${{ env.ASSET_FILES }} .
          # Move the zip file to the current directory
            mv ${{ env.ASSET_FILES }} "$GITHUB_WORKSPACE/"
          # Clean up the folder
          cd "$GITHUB_WORKSPACE"
          rm -rf temp_dir

          echo "Liferay Packaging completed successfully!"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.1
        id: artifact-upload-step
        with:
          name: artifacts
          path: '${{ env.ASSET_FILES }}'
